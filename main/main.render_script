local CLEAR_COLOR = hash("clear_color")
local SET_VIEW_PROJECTION = hash("set_view_projection")
local TOGGLE_SCALE_SNAP = hash("toggle_scale_snap")
local SET_SIZE = hash("set_size")

local IDENTITY = vmath.matrix4()

-- Game objects listening to changes in projection or view
local render_data = require("utils.module-tables")

local function setRenderData(self)
    render_data.set("projection", { proj  = self.projection, view = self.view or vmath.matrix4() } ) 
end

local function setRenderDataViewport(self)

    render_data.set("viewport", { width = self.width, height = self.height, x = 0, y = 0 })
end
--
-- projection that centers content with maintained aspect ratio and optional zoom
--
local function fixed_projection(near, far, zoom)
    print("<<FIXED_PROJECTION>>")
    local projected_width = render.get_window_width() / (zoom or 1)
    local projected_height = render.get_window_height() / (zoom or 1)
    local xoffset = -(projected_width - render.get_width()) / 2
    local yoffset = -(projected_height - render.get_height()) / 2
    return vmath.matrix4_orthographic(xoffset, xoffset + projected_width, yoffset, yoffset + projected_height, near, far)
end
--
-- projection that centers and fits content with maintained aspect ratio
--
local function fixed_fit_projection(near, far)
    print("<<FIXED_FIT_PROJECTION>>")
    local width = render.get_width()
    local height = render.get_height()
    local window_width = render.get_window_width()
    local window_height = render.get_window_height()
    local zoom = math.min(window_width / width, window_height / height)
    return fixed_projection(near, far, zoom)
end
--
-- projection that stretches content
--
local function stretch_projection(near, far)
    
    return vmath.matrix4_orthographic(0, render.get_width(), 0, render.get_height(), near, far)
end

local function get_projection(self)
    
    return self.projection_fn(self.near, self.far, self.zoom)
end

local function setup(self, message)

    if(message.noblock) then 
        self.width = render.get_width()
        self.height = render.get_height()
        setRenderDataViewport(self)
        return 
    end
    
    local height_block = (render.get_window_height() / render.get_window_width()) * message.block
    local width = render.get_window_width() / message.block
    local height = render.get_window_height() / height_block
    self.blockw = message.block
    self.blockh = height_block
    
    self.width = width
    self.height = height
    self.off = {
        x = math.floor(render.get_window_width() / self.width + 1) / 2,
        y = math.floor(render.get_window_height() / self.height + 1) / 2,
    }

    -- render target buffer parameters
    local color_params = {
        format = render.FORMAT_RGBA,
        width = width,
        height = height,
        min_filter = render.FILTER_NEAREST,
        mag_filter = render.FILTER_NEAREST,
        u_wrap = render.WRAP_CLAMP_TO_EDGE,
        v_wrap = render.WRAP_CLAMP_TO_EDGE
    }
    local depth_params = {
        format = render.FORMAT_DEPTH,
        width = width,
        height = height,
        u_wrap = render.WRAP_CLAMP_TO_EDGE,
        v_wrap = render.WRAP_CLAMP_TO_EDGE
    }
    local stencil_params = {
        format = render.FORMAT_STENCIL,
        width = width,
        height = height,
        u_wrap = render.WRAP_CLAMP_TO_EDGE,
        v_wrap = render.WRAP_CLAMP_TO_EDGE
    }
    if self.rt then
        render.delete_render_target(self.rt)
    end

    self.rt = render.render_target("lowrez", {
        [render.BUFFER_COLOR_BIT] = color_params,
        [render.BUFFER_DEPTH_BIT] = depth_params,
        --[render.BUFFER_STENCIL_BIT] = stencil_params
    })
end

function init(self)
    self.tile_pred = render.predicate({"tile"})
    self.gui_pred = render.predicate({"gui"})
    self.text_pred = render.predicate({"text"})
    self.particle_pred = render.predicate({"particle"})
    self.model_pred = render.predicate({"model"})
    self.model_roads_pred = render.predicate({"model_roads"})
    self.model_map_pred = render.predicate({"model_map"})
    self.lowrez_pred = render.predicate({"lowrez"})

    self.view = vmath.matrix4()
    
    self.clear_color = vmath.vector4(0.541, 0.549, 0.933, 0)
    -- self.clear_color.x = sys.get_config("render.clear_color_red", 0)
    -- self.clear_color.y = sys.get_config("render.clear_color_green", 0)
    -- self.clear_color.z = sys.get_config("render.clear_color_blue", 0)
    -- self.clear_color.w = sys.get_config("render.clear_color_alpha", 0)
    self.clear_buffers = {
        [render.BUFFER_COLOR_BIT] = clear_color,
        [render.BUFFER_DEPTH_BIT] = 1,
        [render.BUFFER_STENCIL_BIT] = 0
    }

    
    -- default is stretch projection. copy from builtins and change for different projection
    -- or send a message to the render script to change projection:
    -- msg.post("@render:", "use_stretch_projection", { near = -1, far = 1 })
    -- msg.post("@render:", "use_fixed_projection", { near = -1, far = 1, zoom = 2 })
    -- msg.post("@render:", "use_fixed_fit_projection", { near = -1, far = 1 })
    self.near = 1
    self.far = 10000
    self.zoom = 1.0
    self.projection_fn = stretch_projection
    self.width = render.get_window_width()
    self.height = render.get_window_height()
    render_data.set("viewport", { width = self.width, height = self.height, x = 0, y = 0 })
end

function draw_game(self)

    local proj, view = get_projection(self)
    self.projection   = proj
    --self.view         = view
    setRenderData(self)
    render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})
    
    render.set_viewport(0, 0, self.width, self.height)
    render.set_view(self.view)

    render.set_depth_mask(false)
    render.disable_state(render.STATE_DEPTH_TEST)
    render.disable_state(render.STATE_STENCIL_TEST)
    render.enable_state(render.STATE_BLEND)
    render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
    render.disable_state(render.STATE_CULL_FACE)

    render.set_projection(proj)

    render.draw(self.tile_pred)
    render.draw_debug3d()

    -- render models
    --

    -- Render base map first (so roads and rivers can be layered onto it)
    render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
    render.enable_state(render.STATE_CULL_FACE)
    render.enable_state(render.STATE_DEPTH_TEST)
    render.set_depth_mask(true)
    render.draw(self.model_map_pred)

    -- Render roads and rivers withouth ztest so they layer onto the base map
    render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
    render.enable_state(render.STATE_CULL_FACE)
    render.disable_state(render.STATE_DEPTH_TEST)
    render.set_depth_mask(true)
    render.draw(self.model_roads_pred)
    
    render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
    render.enable_state(render.STATE_CULL_FACE)
    render.enable_state(render.STATE_DEPTH_TEST)
    render.set_depth_mask(true)
    render.draw(self.model_pred)

    --drawtools.drawalllines()   
    
    render.set_depth_mask(false)
    render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
    render.disable_state(render.STATE_CULL_FACE)
    render.draw(self.particle_pred)

    -- debug rendering
    --
    render.disable_state(render.STATE_DEPTH_TEST)
    render.disable_state(render.STATE_CULL_FACE) 
    render.draw_debug3d()
    
end

function update(self)
    render.set_depth_mask(true)
    render.set_stencil_mask(0xff)
    render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})
    msg.post("/camera#camera", "acquire_camera_focus")
    
    if(self.rt) then 
        render.enable_render_target(self.rt)
        draw_game(self)
        render.disable_render_target(self.rt)
    -- render.set_view(vmath.matrix4())

        msg.post("/viewcam#camera", "acquire_camera_focus")
        local invw = 2
        local invh = 2 * (self.blockh / self.blockw)

        render.set_view(vmath.matrix4())
        render.set_viewport(0, 0, render.get_window_width(), render.get_window_height())
        render.set_projection(vmath.matrix4_orthographic(-invw, invw, -invh, invh, -20, 20))

        render.enable_texture(0, self.rt, render.BUFFER_COLOR_BIT)
        render.disable_state(render.STATE_BLEND)
        render.draw(self.lowrez_pred)
        render.enable_state(render.STATE_BLEND)
        render.disable_texture(0)
    else
        draw_game(self)
    end
    
    -- render GUI
    --
    render.set_view(vmath.matrix4())
    render.set_projection(vmath.matrix4_orthographic(0, render.get_window_width(), 0, render.get_window_height(), -1, 1))

    render.enable_state(render.STATE_STENCIL_TEST)
    render.draw(self.gui_pred)
    render.draw(self.text_pred)
    render.disable_state(render.STATE_STENCIL_TEST)
end

function on_message(self, message_id, message)
    if message_id == hash("clear_color") then
        self.clear_color = message.color
    elseif message_id == hash("set_view_projection") then
        -- print("<<SET VIEW PROJECTION>>")
        self.view = message.view
        self.projection = message.projection
    elseif message_id == hash("use_camera_projection") then
        print("<<CAMERA_PROJECTION>>")
        setRenderDataViewport(self)
        self.projection_fn = function() return self.projection or vmath.matrix4() end
    elseif message_id == hash("use_stretch_projection") then
        print("<<ORTHOGRAPHIC>>")
        self.near = message.near or -1
        self.far = message.far or 1
        self.zoom = message.zoom or 1.0
        self.projection_fn = stretch_projection
        self.rt = nil
    elseif message_id == hash("use_fixed_projection") then
        self.near = message.near or -1
        self.far = message.far or 1
        self.zoom = message.zoom or 1
        self.projection_fn = fixed_projection
    elseif message_id == hash("use_fixed_fit_projection") then
        self.near = message.near or -1
        self.far = message.far or 1
        self.projection_fn = fixed_fit_projection
    elseif message_id == hash("set_block") then
        message.block = 1
        setup(self, message)
    end
end
